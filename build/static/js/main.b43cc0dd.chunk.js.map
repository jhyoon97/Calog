{"version":3,"sources":["components/PostContent.js","components/PostList.js","components/TodoItem.js","components/PostWrite.js","components/PostView.js","App.js","serviceWorker.js","index.js"],"names":["PostContent","handlePostRemove","e","_this$props","_this","props","postId","onPostRemove","stopPropagation","handlePostView","_this$props2","onPostView","this","_this$props3","title","content","todoContent","date","modifyDate","performRatio","console","log","react_default","a","createElement","className","onClick","length","Component","PostList","onPostStart","postList","posts","map","post","components_PostContent","key","TodoItem","handleTodoRemove","index","onTodoRemove","preventDefault","handleTodoToggle","onTodoToggle","isOnlyView","isPerform","concat","children","PostWrite","handleTodoAdd","onTodoAdd","todoTitle","writeForm","handleKeyPress","onPostClose","onPostWrite","onPostUpload","isModify","todoList","item","components_TodoItem","todoId","todo","name","value","onChange","placeholder","type","onKeyPress","PostView","viewPostId","handlePostModify","onPostModify","App","state","isPopup","isWrite","isView","viewPostIndex","modifyPostId","initState","setState","getDateNow","moment","format","handlePostClose","handlePostStart","handlePostUpload","_this$state$writeForm","undefined","Object","toConsumableArray","alert","filter","handlePostWrite","objectSpread","defineProperty","target","findIndex","obj","handlePostModifyUpload","_this$state$writeForm2","cnt","toFixed","_this$state","targetPost","_this$state2","components_PostList","components_PostWrite","components_PostView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b43cc0dd.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './scss/PostContent.scss';\r\n\r\nclass PostContent extends Component{\r\n  handlePostRemove = (e) => {\r\n    const {\r\n      postId, \r\n      onPostRemove\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostRemove(postId);\r\n  }\r\n\r\n  handlePostView = (e) => {\r\n    const {\r\n      postId,\r\n      onPostView\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostView(postId);\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      handlePostView\r\n    } = this;\r\n    const {\r\n      title, \r\n      content,\r\n      todoContent,\r\n      date,\r\n      modifyDate,\r\n      performRatio\r\n    } = this.props;\r\n    console.log(modifyDate);\r\n\r\n    return (\r\n      <li className=\"PostContent\" onClick={handlePostView}>\r\n        <div>\r\n          <b className=\"title\">{title}</b>\r\n          <hr/>\r\n          <p className=\"upload_date\">{date}</p>\r\n          <p className=\"content\">{content}</p>\r\n          {todoContent.length > 0 ? <p className=\"perform_ratio\">수행률 <span>{performRatio}%</span>의 Todo list</p> : null}\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n//content.map(item => <TodoItem key={item.todoId} isPerform={item.isPerform}>{item.todo}</TodoItem>)\r\nexport default PostContent;","import React, {Component} from 'react';\r\nimport PostContent from './PostContent';\r\nimport './scss/PostList.scss';\r\n\r\nclass PostList extends Component{\r\n  render(){\r\n    const {\r\n      onPostStart, \r\n      onPostRemove,\r\n      onPostView,\r\n      posts\r\n    } = this.props;\r\n    \r\n    const postList = posts.map(\r\n      (post) => {\r\n        return (\r\n          <PostContent \r\n            onPostRemove={onPostRemove}\r\n            onPostView={onPostView}\r\n            title={post.title} \r\n            content={post.content}\r\n            todoContent={post.todoContent}\r\n            date={post.date}\r\n            modifyDate={post.modifyDate}\r\n            key={post.postId}\r\n            postId={post.postId}\r\n            performRatio={post.performRatio}\r\n          />\r\n        );\r\n      }\r\n    );\r\n    return (\r\n      <section className=\"PostList\">\r\n        <ul className=\"list_area\">\r\n          {postList}\r\n        </ul>\r\n        <button className=\"btn write\" onClick={onPostStart}>글 작성</button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostList;","import React, {Component} from 'react';\r\nimport './scss/TodoItem.scss';\r\n\r\nclass TodoItem extends Component{\r\n  handleTodoRemove = (e) => {\r\n    const {\r\n      index,\r\n      onTodoRemove\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    onTodoRemove(index);\r\n  }\r\n  handleTodoToggle = (e) => {\r\n    if(!this.props.onTodoToggle){\r\n      return;\r\n    }\r\n    const {\r\n      index,\r\n      onTodoToggle\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onTodoToggle(index);\r\n  }\r\n  render(){\r\n    const {\r\n      handleTodoRemove,\r\n      handleTodoToggle\r\n    } = this;\r\n    const {\r\n      isOnlyView,\r\n      isPerform\r\n    } = this.props;\r\n    return (\r\n      <li className={`TodoItem ${(isPerform) ? 'perform' : 'notPerform'}`} onClick={handleTodoToggle}>\r\n        <p>{this.props.children}</p>\r\n        {isOnlyView ? null : (<button onClick={handleTodoRemove}>Delete</button>)}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport './scss/PostWrite.scss';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass PostWrite extends Component{\r\n  handleTodoAdd = (e) => {\r\n    const {\r\n      onTodoAdd,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      todoTitle\r\n    } = writeForm;\r\n\r\n    e.preventDefault();\r\n    onTodoAdd(todoTitle);\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    const {\r\n      onTodoAdd,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      todoTitle\r\n    } = writeForm;\r\n\r\n    if(e.key === 'Enter'){\r\n      e.preventDefault();\r\n      onTodoAdd(todoTitle);\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      handleTodoAdd,\r\n      handleKeyPress\r\n    } = this;\r\n    const {\r\n      onPostClose,\r\n      onPostWrite,\r\n      onPostUpload,\r\n      onTodoRemove,\r\n      isModify,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoTitle,\r\n      todoContent\r\n    } = writeForm;\r\n    const todoList = todoContent.map(\r\n      (item) => {\r\n        return (<TodoItem key={item.todoId} index={item.todoId} onTodoRemove={onTodoRemove}>{item.todo}</TodoItem>);\r\n      }\r\n    );\r\n\r\n    return (\r\n      <form className=\"PostWrite\">\r\n\r\n        <div className=\"form_area\">\r\n          <input name=\"title\" className=\"post_title\" value={title} onChange={onPostWrite} placeholder=\"제목을 입력하세요.\"/>\r\n          <textarea name=\"content\" className=\"post_content\" type=\"text\" value={content} onChange={onPostWrite} placeholder=\"내용을 입력하세요.\"></textarea>\r\n\r\n          <div className=\"todo_title_area\">\r\n            <input name=\"todoTitle\" value={todoTitle} onChange={onPostWrite} onKeyPress={handleKeyPress} placeholder=\"항목을 입력하세요.\"/>\r\n            <button onClick={handleTodoAdd}>Add</button>\r\n          </div>\r\n\r\n          <ul className=\"todo_content_area\">\r\n            {todoList}\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"btn_group\">\r\n          <button className=\"btn cancel\" onClick={onPostClose}>취소</button>\r\n          <button className=\"btn write\" onClick={onPostUpload}>{isModify ? '수정완료' : '게시'}</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostWrite;","import React, {Component} from 'react';\r\nimport './scss/PostView.scss';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass PostView extends Component{\r\n  handlePostRemove = (e) => {\r\n    const { \r\n      onPostRemove,\r\n      viewPostId\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostRemove(viewPostId);\r\n  }\r\n  handlePostModify = (e) => {\r\n    const {\r\n      onPostModify,\r\n      viewPostId,\r\n      post\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoContent\r\n    } = post;\r\n    e.stopPropagation();\r\n    onPostModify({title, content, todoContent}, viewPostId);\r\n  }\r\n  render(){\r\n    const {\r\n      handlePostRemove,\r\n      handlePostModify\r\n    } = this;\r\n    const {\r\n      onPostClose,\r\n      onTodoRemove,\r\n      onTodoToggle,\r\n      post\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoContent\r\n    } = post;\r\n\r\n    let todoList = undefined;\r\n\r\n    todoList = todoContent.map(\r\n      (item) => {\r\n        return (<TodoItem key={item.todoId} index={item.todoId} isOnlyView={true} isPerform={item.isPerform} onTodoRemove={onTodoRemove} onTodoToggle={onTodoToggle}>{item.todo}</TodoItem>);\r\n      }\r\n    );\r\n\r\n    return(\r\n      <div className=\"PostView\">\r\n        <h2 className=\"title_area\">{title}</h2>\r\n        <p className=\"content_area\">{content}</p>\r\n        \r\n        <ul className=\"todo_content_area\">\r\n          {todoList}\r\n        </ul>\r\n\r\n        <div className=\"btn_group\">\r\n          <button className=\"btn remove\" onClick={handlePostRemove}>삭제</button>\r\n          <button className=\"btn modify\" onClick={handlePostModify}>수정</button>\r\n          <button className=\"btn cancel\" onClick={onPostClose}>나가기</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostView;","import React, {Component} from 'react';\nimport moment from 'moment';\nimport PostList from './components/PostList';\nimport PostWrite from './components/PostWrite';\nimport PostView from './components/PostView';\nimport './App.scss';\n\nclass App extends Component{\n  state = {\n    isPopup : false,\n    isWrite : false,\n    isView : false,\n    isModify : false,\n    writeForm : { // 글쓰기 폼에 입력된 데이터\n      title : '',\n      content : '',\n      todoTitle : '',\n      todoContent : []\n    },\n    viewPostIndex : -1,\n    viewPostId : -1,\n    modifyPostId : -1,\n    posts : []\n  }\n  postId = this.state.posts.length\n\n  initState = () => { // 글쓰기 취소, 포스팅 시에 State 초기화\n    this.setState({\n      isPopup : false,\n      isWrite : false,\n      isView : false,\n      writeForm : {\n        title : '',\n        content : '',\n        todoTitle : '',\n        todoContent : []\n      },\n      viewPostIndex : -1,\n      viewPostId : -1,\n      modifyPostId : -1\n    });\n  }\n  getDateNow = () => {\n    return moment().format('YYYY-MM-DD [/] h:mm:ss A');\n  }\n  handlePostClose = (e) => { // 글쓰기 / 글보기 닫음\n    e.preventDefault();\n    this.initState();\n  }\n  handlePostStart = () => { // 글쓰기 버튼 클릭\n    this.setState({\n      isPopup : true,\n      isWrite : true\n    });\n  }\n  handlePostUpload = (e) => { // 포스팅\n    e.preventDefault();\n    const {title, content, todoContent} = this.state.writeForm;\n    let date = this.getDateNow();\n\n    if(title === ''){\n      alert('제목을 입력해주세요.');\n      return;\n    }\n\n    if(content === '' && todoContent.length === 0){\n      alert('내용 또는 TodoList 항목을 추가해주세요.');\n      return;\n    }\n\n    this.initState();\n    this.setState({\n      posts : this.state.posts.concat({\n        postId : this.postId++,\n        title,\n        content,\n        date,\n        modifyDate : undefined,\n        todoContent : [...todoContent],\n        performRatio : 0\n      })\n    });\n  }\n  handlePostRemove = (postId) => { // 포스트 삭제\n    const {posts} = this.state;\n    this.initState();\n    this.setState({\n      posts : posts.filter((post) => post.postId !== postId)\n    });\n  }\n  handlePostWrite = (e) => { // 글쓰기 폼에서 입력\n    const {writeForm} = this.state;\n    this.setState({\n      writeForm : {\n        ...writeForm,\n        [e.target.name] : e.target.value\n      }\n    });\n  }\n  handlePostView = (postId) => { // 글 보기\n    const {posts} = this.state;\n    this.setState({\n      isPopup : true,\n      isView : true,\n      viewPostIndex : posts.findIndex((post) => post.postId === postId),\n      viewPostId : postId\n    });\n  }\n  handlePostModify = (obj, postId) => { // 글 수정 시작\n    this.initState();\n    this.setState({\n      isPopup : true,\n      isModify : true,\n      writeForm : {\n        ...this.state.writeForm,\n        ...obj\n      },\n      modifyPostId : postId\n    });\n  }\n  handlePostModifyUpload = (e) => { // 글 수정 완료\n    e.preventDefault();\n    const {title, content, todoContent} = this.state.writeForm;\n    let date = this.getDateNow();\n    let cnt = 0;\n\n    this.setState({\n      posts : this.state.posts.map(\n        post => {\n          if(post.postId === this.state.modifyPostId){\n            return {\n              ...post,\n              title : title,\n              content : content,\n              todoContent : todoContent.map(\n                (todo) => {\n                  if(todo.isPerform){\n                    cnt++;\n                  }\n                  return {...todo};\n                }\n              ),\n              modifyDate : date,\n              performRatio : ((cnt / todoContent.length) * 100).toFixed(0)\n            };\n          }else{\n            return {...post};\n          }\n        }\n      )\n    });\n    this.initState();\n  }\n  handleTodoAdd = (todo) => { // 투두아이템 추가\n    const {writeForm} = this.state;\n    const {todoTitle, todoContent} = writeForm;\n    const todoId = todoContent.length > 0 ? (todoContent[todoContent.length - 1].todoId) + 1 : 0;\n    \n    if(todoTitle === ''){\n      alert('항목을 입력하세요.');\n      return;\n    }\n\n    this.setState({\n      writeForm : {\n        ...writeForm,\n        todoTitle : '',\n        todoContent : todoContent.concat({todoId, todo, isPerform : false})\n      }\n    });\n  }\n  handleTodoRemove = (todoId) => { // 투두아이템 삭제\n    const {writeForm} = this.state;\n    const {todoContent} = writeForm;\n    this.setState({\n      writeForm : {\n        ...writeForm,\n        todoContent : todoContent.filter(\n          (item) => item.todoId !== todoId\n        )\n      }\n    });\n  }\n  handleTodoToggle = (todoId) => { // 투두아이템 토글 - 글 보기에서만 가능\n    const {posts, viewPostIndex} = this.state;\n    const targetPost = posts[viewPostIndex];\n    let cnt = 0;\n\n    this.setState({\n      posts : posts.map(\n        (post) => {\n          if(post.postId === targetPost.postId){\n            return {\n              ...post, \n              todoContent : post.todoContent.map(\n                (todo) => {\n                  if(todo.isPerform){\n                    cnt++;\n                  }\n                  if(todo.todoId === todoId){\n                    if(!todo.isPerform){\n                      cnt++;\n                    }else{\n                      cnt--;\n                    }\n                    return {...todo, isPerform : !todo.isPerform};\n                  }else{\n                    return {...todo};\n                  }\n                }\n              ),\n              performRatio : ((cnt / post.todoContent.length) * 100).toFixed(0)\n            }\n          }else{\n            return {...post};\n          }\n        }\n      )\n    });\n  }\n  render(){\n    const {\n      handlePostClose,\n      handlePostStart,\n      handlePostUpload,\n      handlePostRemove,\n      handlePostWrite,\n      handlePostView,\n      handlePostModify,\n      handlePostModifyUpload,\n      handleTodoAdd,\n      handleTodoRemove,\n      handleTodoToggle\n    } = this;\n    const {\n      isPopup,\n      isWrite,\n      isView,\n      isModify,\n      writeForm,\n      viewPostIndex,\n      viewPostId,\n      posts\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header><h1>Todo</h1></header>\n        <PostList \n          posts={posts}\n          onPostStart={handlePostStart}\n          onPostRemove={handlePostRemove}\n          onPostView={handlePostView}\n        />\n        <div className={`popup_wrap ${isPopup ? 'on' : ''}`}>\n          {\n            (()=>{\n              if(isWrite){\n                return (\n                  <PostWrite\n                    onPostClose={handlePostClose}\n                    onPostUpload={handlePostUpload}\n                    onPostWrite={handlePostWrite}\n                    onTodoAdd={handleTodoAdd}\n                    onTodoRemove={handleTodoRemove}\n                    writeForm={writeForm}\n                  />\n                );\n              }else if(isView){\n                return (\n                  <PostView\n                    onPostClose={handlePostClose}\n                    onPostRemove={handlePostRemove}\n                    onPostModify={handlePostModify}\n                    onTodoRemove={handleTodoRemove}\n                    onTodoToggle={handleTodoToggle}\n                    viewPostId={viewPostId}\n                    post={posts[viewPostIndex]}\n                  />\n                );\n              }else if(isModify){\n                return (\n                  <PostWrite\n                    onPostClose={handlePostClose}\n                    onPostUpload={handlePostModifyUpload}\n                    onPostWrite={handlePostWrite}\n                    onTodoAdd={handleTodoAdd}\n                    onTodoRemove={handleTodoRemove}\n                    isModify={isModify}\n                    writeForm={writeForm}\n                  />\n                );\n              }\n            })()\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}