{"version":3,"sources":["components/PostContent.js","components/PostList.js","components/TodoItem.js","components/PostWrite.js","components/PostView.js","App.js","serviceWorker.js","index.js"],"names":["PostContent","handlePostRemove","e","_this$props","_this","props","postId","onPostRemove","stopPropagation","handlePostView","_this$props2","onPostView","this","_this$props3","title","content","performRatio","react_default","a","createElement","className","onClick","Component","PostList","onPostStart","postList","posts","map","post","components_PostContent","key","todoContent","TodoItem","handleTodoRemove","index","onTodoRemove","preventDefault","handleTodoToggle","onTodoToggle","isOnlyView","isPerform","concat","children","PostWrite","handleTodoAdd","onTodoAdd","todoTitle","writeForm","handleKeyPress","onPostClose","onPostWrite","onPostUpload","isModify","todoList","item","components_TodoItem","todoId","todo","name","value","onChange","placeholder","type","onKeyPress","PostView","viewPostId","handlePostModify","onPostModify","App","state","isPopup","isWrite","isView","viewPostIndex","modifyPostId","length","initState","setState","handlePostClose","handlePostStart","handlePostUpload","_this$state$writeForm","Object","toConsumableArray","filter","handlePostWrite","objectSpread","defineProperty","target","findIndex","obj","console","log","handlePostModifyUpload","_this$state$writeForm2","cnt","toFixed","alert","_this$state","targetPost","_this$state2","components_PostList","components_PostWrite","components_PostView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bf68f76.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './scss/PostContent.scss';\r\n\r\nclass PostContent extends Component{\r\n  handlePostRemove = (e) => {\r\n    const {\r\n      postId, \r\n      onPostRemove\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostRemove(postId);\r\n  }\r\n\r\n  handlePostView = (e) => {\r\n    const {\r\n      postId,\r\n      onPostView\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostView(postId);\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      handlePostView\r\n    } = this;\r\n    const {\r\n      title, \r\n      content,\r\n      performRatio\r\n    } = this.props;\r\n    \r\n    return (\r\n      <li className=\"PostContent\" onClick={handlePostView}>\r\n        <div>\r\n          <b>{title}</b>\r\n          <hr/>\r\n          <p>{content}</p>\r\n          <p>수행률 {performRatio}%의 Todo list</p>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n//content.map(item => <TodoItem key={item.todoId} isPerform={item.isPerform}>{item.todo}</TodoItem>)\r\nexport default PostContent;","import React, {Component} from 'react';\r\nimport PostContent from './PostContent';\r\nimport './scss/PostList.scss';\r\n\r\nclass PostList extends Component{\r\n  render(){\r\n    const {\r\n      onPostStart, \r\n      onPostRemove,\r\n      onPostView,\r\n      posts\r\n    } = this.props;\r\n    \r\n    const postList = posts.map(\r\n      (post) => {\r\n        return (\r\n          <PostContent \r\n            onPostRemove={onPostRemove}\r\n            onPostView={onPostView}\r\n            key={post.postId}\r\n            postId={post.postId}\r\n            performRatio={post.performRatio}\r\n            title={post.title} \r\n            content={post.content}\r\n            todoContent={post.todoContent}\r\n          />\r\n        );\r\n      }\r\n    );\r\n    return (\r\n      <section className=\"PostList\">\r\n        <ul className=\"list_area\">\r\n          {postList}\r\n        </ul>\r\n        <button className=\"btn write\" onClick={onPostStart}>글 작성</button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostList;","import React, {Component} from 'react';\r\nimport './scss/TodoItem.scss';\r\n\r\nclass TodoItem extends Component{\r\n  handleTodoRemove = (e) => {\r\n    const {\r\n      index,\r\n      onTodoRemove\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    onTodoRemove(index);\r\n  }\r\n  handleTodoToggle = (e) => {\r\n    if(!this.props.onTodoToggle){\r\n      return;\r\n    }\r\n    const {\r\n      index,\r\n      onTodoToggle\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onTodoToggle(index);\r\n  }\r\n  render(){\r\n    const {\r\n      handleTodoRemove,\r\n      handleTodoToggle\r\n    } = this;\r\n    const {\r\n      isOnlyView,\r\n      isPerform\r\n    } = this.props;\r\n    return (\r\n      <li className={`TodoItem ${(isPerform) ? 'perform' : 'notPerform'}`} onClick={handleTodoToggle}>\r\n        <p>{this.props.children}</p>\r\n        {isOnlyView ? null : (<button onClick={handleTodoRemove}>Delete</button>)}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport './scss/PostWrite.scss';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass PostWrite extends Component{\r\n  handleTodoAdd = (e) => {\r\n    const {\r\n      onTodoAdd,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      todoTitle\r\n    } = writeForm;\r\n\r\n    e.preventDefault();\r\n    onTodoAdd(todoTitle);\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    const {\r\n      onTodoAdd,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      todoTitle\r\n    } = writeForm;\r\n\r\n    if(e.key === 'Enter'){\r\n      e.preventDefault();\r\n      onTodoAdd(todoTitle);\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      handleTodoAdd,\r\n      handleKeyPress\r\n    } = this;\r\n    const {\r\n      onPostClose,\r\n      onPostWrite,\r\n      onPostUpload,\r\n      onTodoRemove,\r\n      isModify,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoTitle,\r\n      todoContent\r\n    } = writeForm;\r\n    const todoList = todoContent.map(\r\n      (item) => {\r\n        return (<TodoItem key={item.todoId} index={item.todoId} onTodoRemove={onTodoRemove}>{item.todo}</TodoItem>);\r\n      }\r\n    );\r\n\r\n    return (\r\n      <form className=\"PostWrite\">\r\n\r\n        <div className=\"form_area\">\r\n          <input name=\"title\" className=\"post_title\" value={title} onChange={onPostWrite} placeholder=\"제목을 입력하세요.\"/>\r\n          <textarea name=\"content\" className=\"post_content\" type=\"text\" value={content} onChange={onPostWrite} placeholder=\"내용을 입력하세요.\"></textarea>\r\n\r\n          <div className=\"todo_title_area\">\r\n            <input name=\"todoTitle\" value={todoTitle} onChange={onPostWrite} onKeyPress={handleKeyPress} placeholder=\"항목을 입력하세요.\"/>\r\n            <button onClick={handleTodoAdd}>Add</button>\r\n          </div>\r\n\r\n          <ul className=\"todo_content_area\">\r\n            {todoList}\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"btn_group\">\r\n          <button className=\"btn cancel\" onClick={onPostClose}>취소</button>\r\n          <button className=\"btn write\" onClick={onPostUpload}>{isModify ? '수정완료' : '게시'}</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostWrite;","import React, {Component} from 'react';\r\nimport './scss/PostView.scss';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass PostView extends Component{\r\n  handlePostRemove = (e) => {\r\n    const { \r\n      onPostRemove,\r\n      viewPostId\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostRemove(viewPostId);\r\n  }\r\n  handlePostModify = (e) => {\r\n    const {\r\n      onPostModify,\r\n      viewPostId,\r\n      post\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoContent\r\n    } = post;\r\n    e.stopPropagation();\r\n    onPostModify({title, content, todoContent}, viewPostId);\r\n  }\r\n  render(){\r\n    const {\r\n      handlePostRemove,\r\n      handlePostModify\r\n    } = this;\r\n    const {\r\n      onPostClose,\r\n      onTodoRemove,\r\n      onTodoToggle,\r\n      post\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoContent\r\n    } = post;\r\n\r\n    let todoList = undefined;\r\n\r\n    todoList = todoContent.map(\r\n      (item) => {\r\n        return (<TodoItem key={item.todoId} index={item.todoId} isOnlyView={true} isPerform={item.isPerform} onTodoRemove={onTodoRemove} onTodoToggle={onTodoToggle}>{item.todo}</TodoItem>);\r\n      }\r\n    );\r\n\r\n    return(\r\n      <div className=\"PostView\">\r\n        <h2 className=\"title_area\">{title}</h2>\r\n        <p className=\"content_area\">{content}</p>\r\n        \r\n        <ul className=\"todo_content_area\">\r\n          {todoList}\r\n        </ul>\r\n\r\n        <div className=\"btn_group\">\r\n          <button className=\"btn remove\" onClick={handlePostRemove}>삭제</button>\r\n          <button className=\"btn modify\" onClick={handlePostModify}>수정</button>\r\n          <button className=\"btn cancel\" onClick={onPostClose}>나가기</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostView;","import React, {Component} from 'react';\nimport PostList from './components/PostList';\nimport PostWrite from './components/PostWrite';\nimport PostView from './components/PostView';\nimport './App.css';\n\nclass App extends Component{\n  state = {\n    isPopup : false,\n    isWrite : false,\n    isView : false,\n    isModify : false,\n    writeForm : { // 글쓰기 폼에 입력된 데이터\n      title : '',\n      content : '',\n      todoTitle : '',\n      todoContent : []\n    },\n    viewPostIndex : -1,\n    viewPostId : -1,\n    modifyPostId : -1,\n    posts : []\n  }\n  postId = this.state.posts.length\n\n  initState = () => { // 글쓰기 취소, 포스팅 시에 State 초기화\n    this.setState({\n      isPopup : false,\n      isWrite : false,\n      isView : false,\n      writeForm : {\n        title : '',\n        content : '',\n        todoTitle : '',\n        todoContent : []\n      },\n      viewPostIndex : -1,\n      viewPostId : -1,\n      modifyPostId : -1\n    });\n  }\n  handlePostClose = (e) => { // 글쓰기 / 글보기 닫음\n    e.preventDefault();\n    this.initState();\n  }\n  handlePostStart = () => { // 글쓰기 버튼 클릭\n    this.setState({\n      isPopup : true,\n      isWrite : true\n    });\n  }\n  handlePostUpload = (e) => { // 포스팅\n    e.preventDefault();\n    const {title, content, todoContent} = this.state.writeForm;\n\n    this.initState();\n    this.setState({\n      posts : this.state.posts.concat({\n        postId : this.postId++,\n        title : title,\n        content : content,\n        todoContent : [...todoContent],\n        performRatio : 0\n      })\n    });\n  }\n  handlePostRemove = (postId) => { // 포스트 삭제\n    const {posts} = this.state;\n    this.initState();\n    this.setState({\n      posts : posts.filter((post) => post.postId !== postId)\n    });\n  }\n  handlePostWrite = (e) => { // 글쓰기 폼에서 입력\n    const {writeForm} = this.state;\n    this.setState({\n      writeForm : {\n        ...writeForm,\n        [e.target.name] : e.target.value\n      }\n    });\n  }\n  handlePostView = (postId) => { // 글 보기\n    const {posts} = this.state;\n    this.setState({\n      isPopup : true,\n      isView : true,\n      viewPostIndex : posts.findIndex((post) => post.postId === postId),\n      viewPostId : postId\n    });\n  }\n  handlePostModify = (obj, postId) => {\n    console.log(postId);\n    this.initState();\n    this.setState({\n      isPopup : true,\n      isModify : true,\n      writeForm : {\n        ...this.state.writeForm,\n        ...obj\n      },\n      modifyPostId : postId\n    });\n  }\n  handlePostModifyUpload = (e) => {\n    e.preventDefault();\n    const {title, content, todoContent} = this.state.writeForm;\n    let cnt = 0;\n\n    this.setState({\n      posts : this.state.posts.map(\n        post => {\n          if(post.postId === this.state.modifyPostId){\n            return {\n              ...post,\n              title : title,\n              content : content,\n              todoContent : todoContent.map(\n                (todo) => {\n                  if(todo.isPerform){\n                    cnt++;\n                  }\n                  return {...todo};\n                }\n              ),\n              performRatio : ((cnt / todoContent.length) * 100).toFixed(1)\n            };\n          }else{\n            return {...post};\n          }\n        }\n      )\n    });\n    this.initState();\n  }\n  handleTodoAdd = (todo) => { // 투두아이템 추가\n    const {writeForm} = this.state;\n    const {todoTitle, todoContent} = writeForm;\n    const todoId = todoContent.length > 0 ? (todoContent[todoContent.length - 1].todoId) + 1 : 0;\n    console.log(todoId);\n    if(todoTitle === ''){\n      alert('항목을 입력하세요.');\n      return;\n    }\n\n    this.setState({\n      writeForm : {\n        ...writeForm,\n        todoTitle : '',\n        todoContent : todoContent.concat({todoId, todo, isPerform : false})\n      }\n    });\n  }\n  handleTodoRemove = (todoId) => { // 투두아이템 삭제\n    const {writeForm} = this.state;\n    const {todoContent} = writeForm;\n    this.setState({\n      writeForm : {\n        ...writeForm,\n        todoContent : todoContent.filter(\n          (item) => item.todoId !== todoId\n        )\n      }\n    });\n  }\n  handleTodoToggle = (todoId) => { // 투두아이템 토글 - 글 보기에서만 가능\n    const {posts, viewPostIndex} = this.state;\n    const targetPost = posts[viewPostIndex];\n    let cnt = 0;\n\n    this.setState({\n      posts : posts.map(\n        (post) => {\n          if(post.postId === targetPost.postId){\n            return {\n              ...post, \n              todoContent : post.todoContent.map(\n                (todo) => {\n                  if(todo.isPerform){\n                    cnt++;\n                  }\n                  if(todo.todoId === todoId){\n                    if(!todo.isPerform){\n                      cnt++;\n                    }else{\n                      cnt--;\n                    }\n                    return {...todo, isPerform : !todo.isPerform};\n                  }else{\n                    return {...todo};\n                  }\n                }\n              ),\n              performRatio : ((cnt / post.todoContent.length) * 100).toFixed(1)\n            }\n          }else{\n            return {...post};\n          }\n        }\n      )\n    });\n  }\n  render(){\n    const {\n      handlePostClose,\n      handlePostStart,\n      handlePostUpload,\n      handlePostRemove,\n      handlePostWrite,\n      handlePostView,\n      handlePostModify,\n      handlePostModifyUpload,\n      handleTodoAdd,\n      handleTodoRemove,\n      handleTodoToggle\n    } = this;\n    const {\n      isPopup,\n      isWrite,\n      isView,\n      isModify,\n      writeForm,\n      viewPostIndex,\n      viewPostId,\n      posts\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header><h1>Todo</h1></header>\n        <PostList \n          posts={posts} \n          onPostStart={handlePostStart} \n          onPostRemove={handlePostRemove} \n          onPostView={handlePostView}\n        />\n        <div className={`popup_wrap ${isPopup ? 'on' : ''}`}>\n          {\n            (()=>{\n              if(isWrite){\n                return (\n                  <PostWrite\n                    onPostClose={handlePostClose}\n                    onPostUpload={handlePostUpload}\n                    onPostWrite={handlePostWrite}\n                    onTodoAdd={handleTodoAdd}\n                    onTodoRemove={handleTodoRemove}\n                    writeForm={writeForm}\n                  />\n                );\n              }else if(isView){\n                return (\n                  <PostView\n                    onPostClose={handlePostClose}\n                    onPostRemove={handlePostRemove}\n                    onPostModify={handlePostModify}\n                    onTodoRemove={handleTodoRemove}\n                    onTodoToggle={handleTodoToggle}\n                    viewPostId={viewPostId}\n                    post={posts[viewPostIndex]}\n                  />\n                );\n              }else if(isModify){\n                return (\n                  <PostWrite\n                    onPostClose={handlePostClose}\n                    onPostUpload={handlePostModifyUpload}\n                    onPostWrite={handlePostWrite}\n                    onTodoAdd={handleTodoAdd}\n                    onTodoRemove={handleTodoRemove}\n                    isModify={isModify}\n                    writeForm={writeForm}\n                  />\n                );\n              }\n            })()\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}