{"version":3,"sources":["components/PostContent.js","components/PostList.js","components/TodoItem.js","components/PostWrite.js","components/PostView.js","App.js","serviceWorker.js","index.js"],"names":["PostContent","handlePostRemove","e","_this$props","_this","props","postId","onPostRemove","stopPropagation","handlePostView","_this$props2","onPostView","nextProps","nextState","post","this","_this$props3","title","content","todoContent","date","modifyDate","performRatio","reduce","a","todo","isPerform","length","toFixed","react_default","createElement","className","onClick","Component","PostList","posts","onPostStart","postList","map","components_PostContent","key","TodoItem","handleTodoRemove","todoId","onTodoRemove","preventDefault","handleTodoToggle","onTodoToggle","isOnlyView","console","log","concat","children","PostWrite","handleTodoAdd","onTodoAdd","todoTitle","writeForm","handleKeyPress","onPostClose","onPostWrite","onPostUpload","popupMode","todoList","item","components_TodoItem","name","value","onChange","placeholder","type","onKeyPress","PostView","viewPostId","handlePostModify","onPostModify","bulkPosts","bigArray","i","push","moment","format","undefined","y","App","state","viewPostIndex","modifyPostIndex","modifyPostId","initState","setState","getDateNow","handlePostClose","handlePostStart","handlePostUpload","_this$state$writeForm","alert","filter","handlePostWrite","Object","objectSpread","defineProperty","target","findIndex","before","_this$state","handlePostModifyUpload","_this$state$writeForm2","produce","draft","targetPost","targetTodoIndex","splice","targetTodo","_this$state2","components_PostList","components_PostWrite","components_PostView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oYAyDeA,oNAlDbC,iBAAmB,SAACC,GAAM,IAAAC,EAIpBC,EAAKC,MAFPC,EAFsBH,EAEtBG,OACAC,EAHsBJ,EAGtBI,aAGFL,EAAEM,kBACFD,EAAaD,MAEfG,eAAiB,SAACP,GAAM,IAAAQ,EAIlBN,EAAKC,MAFPC,EAFoBI,EAEpBJ,OACAK,EAHoBD,EAGpBC,WAGFT,EAAEM,kBACFG,EAAWL,yFAnBSM,EAAWC,GAC/B,OAAOD,EAAUE,OAASC,KAAKV,MAAMS,sCAoB/B,IAEJL,EACEM,KADFN,eAFIO,EAUFD,KAAKV,MALPY,EALID,EAKJC,MACAC,EANIF,EAMJE,QACAC,EAPIH,EAOJG,YACAC,EARIJ,EAQJI,KACAC,EATIL,EASJK,WAMIC,GAJQH,EAAYI,OAAO,SAACC,EAAGC,GACnC,OAAGA,EAAKC,YAAoBF,EAChBA,GACX,GAC4BL,EAAYQ,OAAU,KAAKC,QAAQ,GAElE,OACEC,EAAAL,EAAAM,cAAA,MAAIC,UAAU,cAAcC,QAASvB,GACnCoB,EAAAL,EAAAM,cAAA,WACED,EAAAL,EAAAM,cAAA,KAAGC,UAAU,SAASd,GACtBY,EAAAL,EAAAM,cAAA,WACAD,EAAAL,EAAAM,cAAA,KAAGC,UAAU,eAAeX,GAC3BC,EAAaQ,EAAAL,EAAAM,cAAA,KAAGC,UAAU,eAAb,kBAAiCV,GAAkB,KACjEQ,EAAAL,EAAAM,cAAA,KAAGC,UAAU,WAAWb,GACvBC,EAAYQ,OAAS,EAAIE,EAAAL,EAAAM,cAAA,KAAGC,UAAU,iBAAb,sBAAiCF,EAAAL,EAAAM,cAAA,YAAOR,EAAP,KAAjC,oBAA+E,cA/CzFW,cC0CXC,uMAxCStB,EAAWC,GAC/B,OAAOD,EAAUuB,QAAUpB,KAAKV,MAAM8B,uCAEhC,IAAAhC,EAMFY,KAAKV,MAJP+B,EAFIjC,EAEJiC,YACA7B,EAHIJ,EAGJI,aACAI,EAJIR,EAIJQ,WAGI0B,EAPAlC,EAKJgC,MAEqBG,IACrB,SAACxB,GACC,OACEe,EAAAL,EAAAM,cAACS,EAAD,CACEhC,aAAcA,EACdI,WAAYA,EACZM,MAAOH,EAAKG,MACZC,QAASJ,EAAKI,QACdC,YAAaL,EAAKK,YAClBC,KAAMN,EAAKM,KACXC,WAAYP,EAAKO,WACjBmB,IAAK1B,EAAKR,OACVA,OAAQQ,EAAKR,OACbQ,KAAMA,MAMd,OACEe,EAAAL,EAAAM,cAAA,WAASC,UAAU,YACjBF,EAAAL,EAAAM,cAAA,MAAIC,UAAU,aACXM,GAEHR,EAAAL,EAAAM,cAAA,UAAQC,UAAU,YAAYC,QAASI,GAAvC,+BAnCeH,cC4CRQ,0NAzCbC,iBAAmB,SAACxC,GAAM,IAAAC,EAIpBC,EAAKC,MAFPsC,EAFsBxC,EAEtBwC,OACAC,EAHsBzC,EAGtByC,aAGF1C,EAAEM,kBACFN,EAAE2C,iBACFD,EAAaD,MAEfG,iBAAmB,SAAC5C,GAClB,GAAIE,EAAKC,MAAM0C,aAAf,CADwB,IAAArC,EAOpBN,EAAKC,MAFPsC,EALsBjC,EAKtBiC,OACAI,EANsBrC,EAMtBqC,aAGF7C,EAAEM,kBACFuC,EAAaJ,0FAvBO/B,EAAWC,GAC/B,OAAOD,EAAUa,OAASV,KAAKV,MAAMoB,sCAwB/B,IAEJiB,EAEE3B,KAFF2B,iBACAI,EACE/B,KADF+B,iBAHI9B,EAQFD,KAAKV,MAFP2C,EANIhC,EAMJgC,WACAtB,EAPIV,EAOJU,UAGF,OADAuB,QAAQC,IAAInC,KAAKV,MAAMsC,QAErBd,EAAAL,EAAAM,cAAA,MAAIC,UAAS,YAAAoB,OAAezB,EAAa,UAAY,cAAgBM,QAASc,GAC5EjB,EAAAL,EAAAM,cAAA,SAAIf,KAAKV,MAAM+C,UACdJ,EAAa,KAAQnB,EAAAL,EAAAM,cAAA,UAAQE,QAASU,GAAjB,kBAvCPT,cCkFRoB,6MA7EbC,cAAgB,SAACpD,GAAM,IAAAC,EAIjBC,EAAKC,MAFPkD,EAFmBpD,EAEnBoD,UAIAC,EANmBrD,EAGnBsD,UAGAD,UAGFtD,EAAE2C,iBACFU,EAAUC,MAEZE,eAAiB,SAACxD,GAAM,IAAAQ,EAIlBN,EAAKC,MAFPkD,EAFoB7C,EAEpB6C,UAIAC,EANoB9C,EAGpB+C,UAGAD,UAGW,UAAVtD,EAAEsC,MACHtC,EAAE2C,iBACFU,EAAUC,0FA1BQ5C,EAAWC,GAC/B,OAAOD,EAAU6C,YAAc1C,KAAKV,MAAMoD,2CA4BpC,IAEJH,EAEEvC,KAFFuC,cACAI,EACE3C,KADF2C,eAHI1C,EAYFD,KAAKV,MANPsD,EANI3C,EAMJ2C,YACAC,EAPI5C,EAOJ4C,YACAC,EARI7C,EAQJ6C,aACAjB,EATI5B,EASJ4B,aACAkB,EAVI9C,EAUJ8C,UACAL,EAXIzC,EAWJyC,UAGAxC,EAIEwC,EAJFxC,MACAC,EAGEuC,EAHFvC,QACAsC,EAEEC,EAFFD,UAGIO,EADFN,EADFtC,YAE2BmB,IAC3B,SAAC0B,GACC,OAAQnC,EAAAL,EAAAM,cAACmC,EAAD,CAAUzB,IAAKwB,EAAKrB,OAAQA,OAAQqB,EAAKrB,OAAQC,aAAcA,GAAeoB,EAAKvC,QAI/F,OACEI,EAAAL,EAAAM,cAAA,QAAMC,UAAU,aAEdF,EAAAL,EAAAM,cAAA,OAAKC,UAAU,aACbF,EAAAL,EAAAM,cAAA,SAAOoC,KAAK,QAAQnC,UAAU,aAAaoC,MAAOlD,EAAOmD,SAAUR,EAAaS,YAAY,uDAC5FxC,EAAAL,EAAAM,cAAA,YAAUoC,KAAK,UAAUnC,UAAU,eAAeuC,KAAK,OAAOH,MAAOjD,EAASkD,SAAUR,EAAaS,YAAY,uDAEjHxC,EAAAL,EAAAM,cAAA,OAAKC,UAAU,mBACbF,EAAAL,EAAAM,cAAA,SAAOoC,KAAK,YAAYC,MAAOX,EAAWY,SAAUR,EAAaW,WAAYb,EAAgBW,YAAY,uDACzGxC,EAAAL,EAAAM,cAAA,UAAQE,QAASsB,GAAjB,QAGFzB,EAAAL,EAAAM,cAAA,MAAIC,UAAU,qBACXgC,IAILlC,EAAAL,EAAAM,cAAA,OAAKC,UAAU,aACbF,EAAAL,EAAAM,cAAA,UAAQC,UAAU,aAAaC,QAAS2B,GAAxC,gBACA9B,EAAAL,EAAAM,cAAA,UAAQC,UAAU,YAAYC,QAAS6B,GAA6B,WAAdC,EAAyB,2BAAS,yBA1E1E7B,aC+FTuC,oNA3FbvE,iBAAmB,SAACC,GAAM,IAAAC,EAIpBC,EAAKC,MAFPE,EAFsBJ,EAEtBI,aACAkE,EAHsBtE,EAGtBsE,WAGFvE,EAAEM,kBACFD,EAAakE,MAEfC,iBAAmB,SAACxE,GAAM,IAAAQ,EAKpBN,EAAKC,MAHPsE,EAFsBjE,EAEtBiE,aACAF,EAHsB/D,EAGtB+D,WACA3D,EAJsBJ,EAItBI,KAGAG,EAGEH,EAHFG,MACAC,EAEEJ,EAFFI,QACAC,EACEL,EADFK,YAEFjB,EAAEM,kBACFmE,EAAa,CAAC1D,QAAOC,UAASC,eAAcsD,yFAxBxB7D,EAAWC,GAC/B,OAAOD,EAAUE,OAASC,KAAKV,MAAMS,sCAyB/B,IAEJb,EAEEc,KAFFd,iBACAyE,EACE3D,KADF2D,iBAHI1D,EAUFD,KAAKV,MAJPsD,EANI3C,EAMJ2C,YACAf,EAPI5B,EAOJ4B,aACAG,EARI/B,EAQJ+B,aACAjC,EATIE,EASJF,KAGAG,EAKEH,EALFG,MACAC,EAIEJ,EAJFI,QACAC,EAGEL,EAHFK,YACAC,EAEEN,EAFFM,KACAC,EACEP,EADFO,WAEI0C,EAAW5C,EAAYmB,IAC3B,SAACb,GACC,OAAQI,EAAAL,EAAAM,cAACmC,EAAD,CAAUzB,IAAKf,EAAKkB,OAAQA,OAAQlB,EAAKkB,OAAQK,YAAY,EAAMtB,UAAWD,EAAKC,UAAWkB,aAAcA,EAAcG,aAAcA,EAActB,KAAMA,GAAOA,EAAKA,QAO9KH,GAJQH,EAAYI,OAAO,SAACC,EAAGC,GACnC,OAAGA,EAAKC,YAAoBF,EAChBA,GACX,GAC4BL,EAAYQ,OAAU,KAAKC,QAAQ,GAElE,OACEC,EAAAL,EAAAM,cAAA,OAAKC,UAAU,YACbF,EAAAL,EAAAM,cAAA,OAAKC,UAAU,aACbF,EAAAL,EAAAM,cAAA,MAAIC,UAAU,cAAcd,GAC5BY,EAAAL,EAAAM,cAAA,WACAD,EAAAL,EAAAM,cAAA,KAAGC,UAAU,QAAb,wBAA2BX,GAC1BC,EAAaQ,EAAAL,EAAAM,cAAA,KAAGC,UAAU,QAAb,wBAA2BV,GAAkB,KAGzDH,EACEW,EAAAL,EAAAM,cAAA,WACED,EAAAL,EAAAM,cAAA,KAAGC,UAAU,gBAAgBb,GAC7BW,EAAAL,EAAAM,cAAA,YAEF,KAIqB,IAAvBX,EAAYQ,OACV,KACAE,EAAAL,EAAAM,cAAA,WACED,EAAAL,EAAAM,cAAA,KAAGC,UAAU,iBAAb,oCAAqCF,EAAAL,EAAAM,cAAA,YAAOR,EAAP,KAArC,gDACAO,EAAAL,EAAAM,cAAA,MAAIC,UAAU,qBACXgC,KAMXlC,EAAAL,EAAAM,cAAA,OAAKC,UAAU,aACbF,EAAAL,EAAAM,cAAA,UAAQC,UAAU,aAAaC,QAAS/B,GAAxC,gBACA4B,EAAAL,EAAAM,cAAA,UAAQC,UAAU,aAAaC,QAAS0C,GAAxC,gBACA7C,EAAAL,EAAAM,cAAA,UAAQC,UAAU,aAAaC,QAAS2B,GAAxC,+BAxFa1B,cCMjB2C,SAAY,WAEhB,IADA,IAAMC,EAAW,GACTC,EAAI,EAAGA,EAAI,KAAMA,IAAI,CAC3BD,EAASE,KAAK,CACZzE,OAASwE,EACT7D,MAAK,SAAAkC,OAAY2B,GACjB5D,QAAO,WAAAiC,OAAc2B,GACrB3D,YAAc,GACdC,KAAO4D,MAASC,OAAO,4BACvB5D,gBAAa6D,IAEf,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACpBN,EAASC,GAAG3D,YAAY4D,KAAK,CAC3BpC,OAASwC,EACT1D,KAAI,gBAAA0B,OAASgC,GACbzD,WAAY,IAIlB,OAAOmD,IA0QMO,6MA7PbC,MAAQ,CACNvB,UAAY,GACZL,UAAY,CACVxC,MAAQ,GACRC,QAAU,GACVsC,UAAY,GACZrC,YAAc,IAEhBmE,eAAiB,EACjBb,YAAc,EACdc,iBAAmB,EACnBC,cAAgB,EAChBrD,MAAQyC,OAEVtE,OAASF,EAAKiF,MAAMlD,MAAMR,SAE1B8D,UAAY,WACVrF,EAAKsF,SAAS,CACZ5B,UAAY,GACZL,UAAY,CACVxC,MAAQ,GACRC,QAAU,GACVsC,UAAY,GACZrC,YAAc,IAEhBmE,eAAiB,EACjBb,YAAc,EACdc,iBAAmB,EACnBC,cAAgB,OAGpBG,WAAa,WACX,OAAOX,MAASC,OAAO,+BAEzBW,gBAAkB,SAAC1F,GACjBA,EAAE2C,iBACFzC,EAAKqF,eAEPI,gBAAkB,WAChBzF,EAAKsF,SAAS,CACZ5B,UAAY,aAGhBgC,iBAAmB,SAAC5F,GAClBA,EAAE2C,iBADsB,IAEjBV,EAAS/B,EAAKiF,MAAdlD,MAFiB4D,EAGc3F,EAAKiF,MAAM5B,UAA1CxC,EAHiB8E,EAGjB9E,MAAOC,EAHU6E,EAGV7E,QAASC,EAHC4E,EAGD5E,YACnBC,EAAOhB,EAAKuF,aAEH,KAAV1E,EAIY,KAAZC,GAAyC,IAAvBC,EAAYQ,QAIjCvB,EAAKqF,YACLrF,EAAKsF,SAAS,CACZvD,MAAQA,EAAMgB,OAAO,CACnB7C,OAASF,EAAKE,SACdW,QACAC,UACAC,cACAC,OACAC,gBAAa6D,OAXfc,MAAM,+FAJNA,MAAM,+DAmBV/F,iBAAmB,SAACK,GAAW,IACtB6B,EAAS/B,EAAKiF,MAAdlD,MAEP/B,EAAKqF,YACLrF,EAAKsF,SAAS,CACZvD,MAAQA,EAAM8D,OAAO,SAACnF,GAAD,OAAUA,EAAKR,SAAWA,SAGnD4F,gBAAkB,SAAChG,GAAM,IAChBuD,EAAarD,EAAKiF,MAAlB5B,UAEPrD,EAAKsF,SAAS,CACZjC,UAAS0C,OAAAC,EAAA,EAAAD,CAAA,GACJ1C,EADI0C,OAAAE,EAAA,EAAAF,CAAA,GAENjG,EAAEoG,OAAOpC,KAAQhE,EAAEoG,OAAOnC,aAIjC1D,eAAiB,SAACH,GAAW,IACpB6B,EAAS/B,EAAKiF,MAAdlD,MAEP/B,EAAKsF,SAAS,CACZ5B,UAAY,OACZwB,cAAgBnD,EAAMoE,UAAU,SAACzF,GAAD,OAAUA,EAAKR,SAAWA,IAC1DmE,WAAanE,OAGjBoE,iBAAmB,SAAC8B,EAAQlG,GAAW,IAAAmG,EACVrG,EAAKiF,MAAzB5B,EAD8BgD,EAC9BhD,UAAWtB,EADmBsE,EACnBtE,MAElB/B,EAAKqF,YACLrF,EAAKsF,SAAS,CACZ5B,UAAY,SACZL,UAAS0C,OAAAC,EAAA,EAAAD,CAAA,GACJ1C,EACA+C,GAELjB,gBAAkBpD,EAAMoE,UAAU,SAAAzF,GAAI,OAAIA,EAAKR,SAAWA,IAC1DkF,aAAelF,OAGnBoG,uBAAyB,SAACxG,GACxBA,EAAE2C,iBAD4B,IAEvB0C,EAAmBnF,EAAKiF,MAAxBE,gBAFuBoB,EAGQvG,EAAKiF,MAAM5B,UAA1CxC,EAHuB0F,EAGvB1F,MAAOC,EAHgByF,EAGhBzF,QAASC,EAHOwF,EAGPxF,YAEV,KAAVF,EAIY,KAAZC,GAAyC,IAAvBC,EAAYQ,QAKjCvB,EAAKsF,SACHkB,YAAQ,SAAAC,GACR,IAAMC,EAAaD,EAAM1E,MAAMoD,GAC/BuB,EAAW7F,MAAQA,EACnB6F,EAAW5F,QAAUA,EACrB4F,EAAW3F,YAAcA,EACzB2F,EAAWzF,WAAajB,EAAKuF,gBAG/BvF,EAAKqF,aAbHO,MAAM,+FAJNA,MAAM,+DAmBV1C,cAAgB,SAAC7B,GAAS,IACjBgC,EAAarD,EAAKiF,MAAlB5B,UACAD,EAA0BC,EAA1BD,UAAWrC,EAAesC,EAAftC,YACZwB,EAASxB,EAAYQ,OAAS,EAAKR,EAAYA,EAAYQ,OAAS,GAAGgB,OAAU,EAAI,EAE1E,KAAda,EAIHpD,EAAKsF,SACHkB,YAAQ,SAAAC,GACN,IAAMpD,EAAYoD,EAAMpD,UACxBA,EAAUD,UAAY,GACtBC,EAAUtC,YAAY4D,KAAK,CAACpC,SAAQlB,OAAMC,WAAY,OAPxDsE,MAAM,yDAWVtD,iBAAmB,SAACC,GAClBvC,EAAKsF,SACHkB,YAAQ,SAAAC,GACN,IAAMpD,EAAYoD,EAAMpD,UAClBsD,EAAkBtD,EAAUtC,YAAYoF,UAAU,SAAA9E,GAAI,OAAIA,EAAKkB,SAAWA,IAChFc,EAAUtC,YAAY6F,OAAOD,EAAiB,SAIpDjE,iBAAmB,SAACH,GAAW,IACtB2C,EAAiBlF,EAAKiF,MAAtBC,cAEPlF,EAAKsF,SACHkB,YAAQ,SAAAC,GACN,IAAMC,EAAaD,EAAM1E,MAAMmD,GACzByB,EAAkBD,EAAW3F,YAAYoF,UAAU,SAAA9E,GAAI,OAAIA,EAAKkB,SAAWA,IAC3EsE,EAAaH,EAAW3F,YAAY4F,GAC1CE,EAAWvF,WAAauF,EAAWvF,sFAIjC,IAEJJ,EAYEP,KAZFO,aACAsE,EAWE7E,KAXF6E,gBACAC,EAUE9E,KAVF8E,gBACAC,EASE/E,KATF+E,iBACA7F,EAQEc,KARFd,iBACAiG,EAOEnF,KAPFmF,gBACAzF,EAMEM,KANFN,eACAiE,EAKE3D,KALF2D,iBACAgC,EAIE3F,KAJF2F,uBACApD,EAGEvC,KAHFuC,cACAZ,EAEE3B,KAFF2B,iBACAI,EACE/B,KADF+B,iBAbIoE,EAqBFnG,KAAKsE,MALPvB,EAhBIoD,EAgBJpD,UACAL,EAjBIyD,EAiBJzD,UACA6B,EAlBI4B,EAkBJ5B,cACAb,EAnBIyC,EAmBJzC,WACAtC,EApBI+E,EAoBJ/E,MAGF,OACEN,EAAAL,EAAAM,cAAA,OAAKC,UAAU,OACbF,EAAAL,EAAAM,cAAA,cAAQD,EAAAL,EAAAM,cAAA,mBACRD,EAAAL,EAAAM,cAACqF,EAAD,CACEhF,MAAOA,EACPC,YAAayD,EACbtF,aAAcN,EACdU,WAAYF,IAEdoB,EAAAL,EAAAM,cAAA,OAAKC,UAAS,cAAAoB,OAAgBW,EAAY,KAAO,KAG1B,UAAdA,EAECjC,EAAAL,EAAAM,cAACsF,EAAD,CACEzD,YAAaiC,EACb/B,aAAciC,EACdlC,YAAasC,EACb3C,UAAWD,EACXV,aAAcF,EACde,UAAWA,IAGM,SAAdK,EAELjC,EAAAL,EAAAM,cAACuF,EAAD,CACE1D,YAAaiC,EACbrF,aAAcN,EACd0E,aAAcD,EACd9B,aAAcF,EACdK,aAAcD,EACd2B,WAAYA,EACZ3D,KAAMqB,EAAMmD,GACZhE,aAAcA,IAGG,WAAdwC,EAELjC,EAAAL,EAAAM,cAACsF,EAAD,CACEzD,YAAaiC,EACb/B,aAAc6C,EACd9C,YAAasC,EACb3C,UAAWD,EACXV,aAAcF,EACdoB,UAAWA,EACXL,UAAWA,SATX,WAzOFxB,aC7BEqF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAAL,EAAAM,cAAC+F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b7c3d5d2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './scss/PostContent.scss';\r\n\r\nclass PostContent extends Component{\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    return nextProps.post !== this.props.post;\r\n  }\r\n  handlePostRemove = (e) => {\r\n    const {\r\n      postId, \r\n      onPostRemove\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostRemove(postId);\r\n  }\r\n  handlePostView = (e) => {\r\n    const {\r\n      postId,\r\n      onPostView\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostView(postId);\r\n  }\r\n  render(){\r\n    const {\r\n      handlePostView\r\n    } = this;\r\n    const {\r\n      title, \r\n      content,\r\n      todoContent,\r\n      date,\r\n      modifyDate,\r\n    } = this.props;\r\n    const count = todoContent.reduce((a, todo) => {\r\n      if(todo.isPerform) return ++a;\r\n      else return a;\r\n    }, 0);\r\n    const performRatio = ((count / todoContent.length) * 100).toFixed(0);\r\n\r\n    return (\r\n      <li className=\"PostContent\" onClick={handlePostView}>\r\n        <div>\r\n          <b className=\"title\">{title}</b>\r\n          <hr/>\r\n          <p className=\"upload_date\">{date}</p>\r\n          {modifyDate ? <p className=\"upload_date\">수정 : {modifyDate}</p> : null}\r\n          <p className=\"content\">{content}</p>\r\n          {todoContent.length > 0 ? <p className=\"perform_ratio\">수행률 <span>{performRatio}%</span>의 Todo list</p> : null}\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n//content.map(item => <TodoItem key={item.todoId} isPerform={item.isPerform}>{item.todo}</TodoItem>)\r\nexport default PostContent;","import React, {Component} from 'react';\r\nimport PostContent from './PostContent';\r\nimport './scss/PostList.scss';\r\n\r\nclass PostList extends Component{\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    return nextProps.posts !== this.props.posts;\r\n  }\r\n  render(){\r\n    const {\r\n      onPostStart, \r\n      onPostRemove,\r\n      onPostView,\r\n      posts\r\n    } = this.props;\r\n    const postList = posts.map(\r\n      (post) => {\r\n        return (\r\n          <PostContent \r\n            onPostRemove={onPostRemove}\r\n            onPostView={onPostView}\r\n            title={post.title} \r\n            content={post.content}\r\n            todoContent={post.todoContent}\r\n            date={post.date}\r\n            modifyDate={post.modifyDate}\r\n            key={post.postId}\r\n            postId={post.postId}\r\n            post={post}\r\n          />\r\n        );\r\n      }\r\n    );\r\n    \r\n    return (\r\n      <section className=\"PostList\">\r\n        <ul className=\"list_area\">\r\n          {postList}\r\n        </ul>\r\n        <button className=\"btn write\" onClick={onPostStart}>글 작성</button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostList;","import React, {Component} from 'react';\r\nimport './scss/TodoItem.scss';\r\n\r\nclass TodoItem extends Component{\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    return nextProps.todo !== this.props.todo;\r\n  }\r\n  handleTodoRemove = (e) => {\r\n    const {\r\n      todoId,\r\n      onTodoRemove\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    onTodoRemove(todoId);\r\n  }\r\n  handleTodoToggle = (e) => {\r\n    if(!this.props.onTodoToggle){\r\n      return;\r\n    }\r\n    const {\r\n      todoId,\r\n      onTodoToggle\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onTodoToggle(todoId);\r\n  }\r\n  render(){\r\n    const {\r\n      handleTodoRemove,\r\n      handleTodoToggle\r\n    } = this;\r\n    const {\r\n      isOnlyView,\r\n      isPerform\r\n    } = this.props;\r\n    console.log(this.props.todoId);\r\n    return (\r\n      <li className={`TodoItem ${(isPerform) ? 'perform' : 'notPerform'}`} onClick={handleTodoToggle}>\r\n        <p>{this.props.children}</p>\r\n        {isOnlyView ? null : (<button onClick={handleTodoRemove}>Delete</button>)}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport './scss/PostWrite.scss';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass PostWrite extends Component{\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    return nextProps.writeForm !== this.props.writeForm;\r\n  }\r\n  handleTodoAdd = (e) => {\r\n    const {\r\n      onTodoAdd,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      todoTitle\r\n    } = writeForm;\r\n\r\n    e.preventDefault();\r\n    onTodoAdd(todoTitle);\r\n  }\r\n  handleKeyPress = (e) => {\r\n    const {\r\n      onTodoAdd,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      todoTitle\r\n    } = writeForm;\r\n\r\n    if(e.key === 'Enter'){\r\n      e.preventDefault();\r\n      onTodoAdd(todoTitle);\r\n    }\r\n  }\r\n  render(){\r\n    const {\r\n      handleTodoAdd,\r\n      handleKeyPress\r\n    } = this;\r\n    const {\r\n      onPostClose,\r\n      onPostWrite,\r\n      onPostUpload,\r\n      onTodoRemove,\r\n      popupMode,\r\n      writeForm\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoTitle,\r\n      todoContent\r\n    } = writeForm;\r\n    const todoList = todoContent.map(\r\n      (item) => {\r\n        return (<TodoItem key={item.todoId} todoId={item.todoId} onTodoRemove={onTodoRemove}>{item.todo}</TodoItem>);\r\n      }\r\n    );\r\n\r\n    return (\r\n      <form className=\"PostWrite\">\r\n\r\n        <div className=\"form_area\">\r\n          <input name=\"title\" className=\"post_title\" value={title} onChange={onPostWrite} placeholder=\"제목을 입력하세요.\"/>\r\n          <textarea name=\"content\" className=\"post_content\" type=\"text\" value={content} onChange={onPostWrite} placeholder=\"내용을 입력하세요.\"></textarea>\r\n\r\n          <div className=\"todo_title_area\">\r\n            <input name=\"todoTitle\" value={todoTitle} onChange={onPostWrite} onKeyPress={handleKeyPress} placeholder=\"항목을 입력하세요.\"/>\r\n            <button onClick={handleTodoAdd}>Add</button>\r\n          </div>\r\n\r\n          <ul className=\"todo_content_area\">\r\n            {todoList}\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"btn_group\">\r\n          <button className=\"btn cancel\" onClick={onPostClose}>취소</button>\r\n          <button className=\"btn write\" onClick={onPostUpload}>{popupMode === 'modify' ? '수정완료' : '게시'}</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostWrite;","import React, {Component} from 'react';\r\nimport './scss/PostView.scss';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass PostView extends Component{\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    return nextProps.post !== this.props.post;\r\n  }\r\n  handlePostRemove = (e) => {\r\n    const { \r\n      onPostRemove,\r\n      viewPostId\r\n    } = this.props;\r\n\r\n    e.stopPropagation();\r\n    onPostRemove(viewPostId);\r\n  }\r\n  handlePostModify = (e) => {\r\n    const {\r\n      onPostModify,\r\n      viewPostId,\r\n      post\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoContent\r\n    } = post;\r\n    e.stopPropagation();\r\n    onPostModify({title, content, todoContent}, viewPostId);\r\n  }\r\n  render(){\r\n    const {\r\n      handlePostRemove,\r\n      handlePostModify\r\n    } = this;\r\n    const {\r\n      onPostClose,\r\n      onTodoRemove,\r\n      onTodoToggle,\r\n      post\r\n    } = this.props;\r\n    const {\r\n      title,\r\n      content,\r\n      todoContent,\r\n      date,\r\n      modifyDate\r\n    } = post;\r\n    const todoList = todoContent.map(\r\n      (todo) => {\r\n        return (<TodoItem key={todo.todoId} todoId={todo.todoId} isOnlyView={true} isPerform={todo.isPerform} onTodoRemove={onTodoRemove} onTodoToggle={onTodoToggle} todo={todo}>{todo.todo}</TodoItem>);\r\n      }\r\n    );\r\n    const count = todoContent.reduce((a, todo) => {\r\n      if(todo.isPerform) return ++a;\r\n      else return a;\r\n    }, 0);\r\n    const performRatio = ((count / todoContent.length) * 100).toFixed(0);\r\n    \r\n    return(\r\n      <div className=\"PostView\">\r\n        <div className=\"view_area\">\r\n          <h2 className=\"title_area\">{title}</h2>\r\n          <hr/>\r\n          <p className=\"date\">작성일 : {date}</p>\r\n          {modifyDate ? <p className=\"date\">수정일 : {modifyDate}</p> : null}\r\n\r\n          {\r\n            content \r\n            ? <div>\r\n                <p className=\"content_area\">{content}</p>\r\n                <hr/>\r\n              </div>\r\n            : null\r\n          }\r\n            \r\n          {\r\n            todoContent.length === 0\r\n            ? null\r\n            : <div>\r\n                <p className=\"perform_ratio\">오늘 할 일의 <span>{performRatio}%</span>를 수행하셨군요!</p>\r\n                <ul className=\"todo_content_area\">\r\n                  {todoList}\r\n                </ul>\r\n              </div>\r\n          }\r\n        </div>\r\n\r\n        <div className=\"btn_group\">\r\n          <button className=\"btn remove\" onClick={handlePostRemove}>삭제</button>\r\n          <button className=\"btn modify\" onClick={handlePostModify}>수정</button>\r\n          <button className=\"btn cancel\" onClick={onPostClose}>나가기</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostView;","import React, {Component} from 'react';\nimport moment from 'moment';\nimport produce from 'immer';\n\nimport PostList from './components/PostList';\nimport PostWrite from './components/PostWrite';\nimport PostView from './components/PostView';\n\nimport './App.scss';\n\nconst bulkPosts = () => {\n  const bigArray = [];\n  for(let i = 0; i < 3650; i++){\n    bigArray.push({\n      postId : i,\n      title : `title ${i}`,\n      content : `content ${i}`,\n      todoContent : [],\n      date : moment().format('YYYY-MM-DD [/] h:mm:ss A'),\n      modifyDate : undefined\n    });\n    for(let y = 0; y < 5; y++){\n      bigArray[i].todoContent.push({\n        todoId : y,\n        todo : `할일 ${y}`,\n        isPerform : false\n      });\n    }\n  }\n  return bigArray;\n}\n\n/* state.posts의 구조\nposts -- postId\n       - title\n       - content\n       - todoContent -- todoId\n       - date         - todo\n       - modifyDate   - isPerform\n\n*/\nclass App extends Component{\n  state = {\n    popupMode : '',\n    writeForm : { // 글쓰기 폼에 입력된 데이터\n      title : '',\n      content : '',\n      todoTitle : '',\n      todoContent : []\n    },\n    viewPostIndex : -1,\n    viewPostId : -1,\n    modifyPostIndex : -1,\n    modifyPostId : -1,\n    posts : bulkPosts()\n  }\n  postId = this.state.posts.length\n\n  initState = () => { // 글쓰기 취소, 포스팅 시에 State 초기화\n    this.setState({\n      popupMode : '',\n      writeForm : {\n        title : '',\n        content : '',\n        todoTitle : '',\n        todoContent : []\n      },\n      viewPostIndex : -1,\n      viewPostId : -1,\n      modifyPostIndex : -1,\n      modifyPostId : -1\n    });\n  }\n  getDateNow = () => { // 현재 날짜 / 시각 받아오기\n    return moment().format('YYYY-MM-DD [/] h:mm:ss A');\n  }\n  handlePostClose = (e) => { // 글쓰기 / 글보기 닫음\n    e.preventDefault();\n    this.initState();\n  }\n  handlePostStart = () => { // 글쓰기 버튼 클릭\n    this.setState({\n      popupMode : 'write'\n    });\n  }\n  handlePostUpload = (e) => { // 포스팅\n    e.preventDefault();\n    const {posts} = this.state;\n    const {title, content, todoContent} = this.state.writeForm;\n    let date = this.getDateNow();\n\n    if(title === ''){\n      alert('제목을 입력해주세요.');\n      return;\n    }\n    if(content === '' && todoContent.length === 0){\n      alert('내용 또는 TodoList 항목을 추가해주세요.');\n      return;\n    }\n    this.initState();\n    this.setState({\n      posts : posts.concat({\n        postId : this.postId++,\n        title,\n        content,\n        todoContent,\n        date,\n        modifyDate : undefined,\n      })\n    });\n  }\n  handlePostRemove = (postId) => { // 포스트 삭제\n    const {posts} = this.state;\n\n    this.initState();\n    this.setState({\n      posts : posts.filter((post) => post.postId !== postId)\n    });\n  }\n  handlePostWrite = (e) => { // 글쓰기 폼에서 입력\n    const {writeForm} = this.state;\n\n    this.setState({\n      writeForm : {\n        ...writeForm,\n        [e.target.name] : e.target.value\n      }\n    });\n  }\n  handlePostView = (postId) => { // 글 보기\n    const {posts} = this.state;\n\n    this.setState({\n      popupMode : 'view',\n      viewPostIndex : posts.findIndex((post) => post.postId === postId),\n      viewPostId : postId\n    });\n  }\n  handlePostModify = (before, postId) => { // 글 수정 시작\n    const {writeForm, posts} = this.state;\n    \n    this.initState();\n    this.setState({\n      popupMode : 'modify',\n      writeForm : {\n        ...writeForm,\n        ...before\n      },\n      modifyPostIndex : posts.findIndex(post => post.postId === postId),\n      modifyPostId : postId\n    });\n  }\n  handlePostModifyUpload = (e) => { // 글 수정 완료\n    e.preventDefault();\n    const {modifyPostIndex} = this.state;\n    const {title, content, todoContent} = this.state.writeForm;\n\n    if(title === ''){\n      alert('제목을 입력해주세요.');\n      return;\n    }\n    if(content === '' && todoContent.length === 0){\n      alert('내용 또는 TodoList 항목을 추가해주세요.');\n      return;\n    }\n\n    this.setState(\n      produce(draft => {\n      const targetPost = draft.posts[modifyPostIndex];\n      targetPost.title = title;\n      targetPost.content = content;\n      targetPost.todoContent = todoContent;\n      targetPost.modifyDate = this.getDateNow();\n      })\n    );\n    this.initState();\n  }\n  handleTodoAdd = (todo) => { // 투두아이템 추가\n    const {writeForm} = this.state;\n    const {todoTitle, todoContent} = writeForm;\n    const todoId = todoContent.length > 0 ? (todoContent[todoContent.length - 1].todoId) + 1 : 0;\n    \n    if(todoTitle === ''){\n      alert('항목을 입력하세요.');\n      return;\n    }\n    this.setState(\n      produce(draft => {\n        const writeForm = draft.writeForm;\n        writeForm.todoTitle = '';\n        writeForm.todoContent.push({todoId, todo, isPerform : false});\n      })\n    );\n  }\n  handleTodoRemove = (todoId) => { // 투두아이템 삭제\n    this.setState(\n      produce(draft => {\n        const writeForm = draft.writeForm;\n        const targetTodoIndex = writeForm.todoContent.findIndex(todo => todo.todoId === todoId);\n        writeForm.todoContent.splice(targetTodoIndex, 1);\n      })\n    );\n  }\n  handleTodoToggle = (todoId) => { // 투두아이템 토글 - 글 보기에서만 가능\n    const {viewPostIndex} = this.state;\n\n    this.setState(\n      produce(draft => {\n        const targetPost = draft.posts[viewPostIndex];\n        const targetTodoIndex = targetPost.todoContent.findIndex(todo => todo.todoId === todoId);\n        const targetTodo = targetPost.todoContent[targetTodoIndex];\n        targetTodo.isPerform = !targetTodo.isPerform;\n      })\n    );\n  }\n  render(){\n    const {\n      performRatio,\n      handlePostClose,\n      handlePostStart,\n      handlePostUpload,\n      handlePostRemove,\n      handlePostWrite,\n      handlePostView,\n      handlePostModify,\n      handlePostModifyUpload,\n      handleTodoAdd,\n      handleTodoRemove,\n      handleTodoToggle\n    } = this;\n    const {\n      popupMode,\n      writeForm,\n      viewPostIndex,\n      viewPostId,\n      posts\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header><h1>Todo</h1></header>\n        <PostList \n          posts={posts}\n          onPostStart={handlePostStart}\n          onPostRemove={handlePostRemove}\n          onPostView={handlePostView}\n        />\n        <div className={`popup_wrap ${popupMode ? 'on' : ''}`}>\n          {\n            (()=>{\n              if(popupMode === 'write'){\n                return (\n                  <PostWrite\n                    onPostClose={handlePostClose}\n                    onPostUpload={handlePostUpload}\n                    onPostWrite={handlePostWrite}\n                    onTodoAdd={handleTodoAdd}\n                    onTodoRemove={handleTodoRemove}\n                    writeForm={writeForm}\n                  />\n                );\n              }else if(popupMode === 'view'){\n                return (\n                  <PostView\n                    onPostClose={handlePostClose}\n                    onPostRemove={handlePostRemove}\n                    onPostModify={handlePostModify}\n                    onTodoRemove={handleTodoRemove}\n                    onTodoToggle={handleTodoToggle}\n                    viewPostId={viewPostId}\n                    post={posts[viewPostIndex]}\n                    performRatio={performRatio}\n                  />\n                );\n              }else if(popupMode === 'modify'){\n                return (\n                  <PostWrite\n                    onPostClose={handlePostClose}\n                    onPostUpload={handlePostModifyUpload}\n                    onPostWrite={handlePostWrite}\n                    onTodoAdd={handleTodoAdd}\n                    onTodoRemove={handleTodoRemove}\n                    popupMode={popupMode}\n                    writeForm={writeForm}\n                  />\n                );\n              }\n            })()\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}